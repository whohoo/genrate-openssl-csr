#################################
#       生成CSR证书申请文件        #
#################################

# 1. 在本配置文件当前目录运行openssl命令, 本命令会在当前目录下生成private-key.pem与new-file.csr两文件, private-key.pem是PKCS#8文件格式规范
# openssl req -new -sha256 -newkey rsa:2048 -nodes -keyout private-key.pem -out new-file.csr -config openssl-csr.cnf


# 2. 两步生成private-key.pem与new-file.csr文件,
#   a) 生成RSA:2048 private-key.pem, PKCS#1文件格式规范
#   openssl genrsa -out private-key.pem 2048
#   b) 通过步骤a)生成的private-key.pem生成new-file.csr文件
#   openssl req -new -key private-key.pem -out new-file.csr -config openssl-csr.cnf


# 3. 查看已生成的CSR文件
# openssl req -noout -text -in new-file.csr


# 4. 在docker中运行下载openssl程序并运行第一条openssl命令
# docker run -it --rm -v "$(pwd)":/srv -w /srv alpine apk add --no-cache openssl && openssl req -new -sha256 -newkey rsa:2048 -nodes -keyout private-key.pem -out new-file.csr -config openssl-csr.cnf


# 5. 通过docker-compose运行容器, 在当前目录输出private-key.pem与new-file.csr文件, 并在终端显示验证信息. 
# docker-compose up
# 文件生成好后, 释放容器 
# docker-compose down


# 6.1 PKCS#1转PKCS#8
# openssl pkcs8 -topk8 -inform PEM -in pkcs1.pem -outform PEM -nocrypt -out pkcs8.pem
# 6.2 PKCS#8转PKCS#1
# openssl rsa -in pkcs8.pem -out pkcs1.pem


[req]
distinguished_name = req_distinguished_name
### 如果不需要定义SAN (Subject Alternative name), 则在req_extensions前加上(#)
req_extensions = req_ext
prompt = no
[req_distinguished_name]
### Country Name (2 letter code)
C   = CN
### State or Province Name (full name)
ST  = Shanghai
### Locality Name (eg, city)
L   = Shanghai
### Organization Name (eg, company)
O   = SAIC General Motors Corporation Limited
### Organizational Unit Name (eg, section)
OU  = IT Dept.
### Common Name (eg, your name or your server\'s hostname)
CN  = m.club.buick.com.cn
### Email Address 可选, 如果没有邮箱地址, 则在emailAddress前加上(#),
emailAddress = wally.he@hylink.com
[req_ext]
subjectAltName = @alt_names
[alt_names]
DNS.1 = m.club.buick.com.cn
#DNS.2 = centos8-3.example.com
#IP.1 = 10.10.10.13
#IP.2 = 10.10.10.14
#IP.3 = 10.10.10.17
